@implements IDialogContentComponent

@inject IExpenseReportService ExpenseReportService
@inject IToastService ToastService

<EditForm Model="model"
          OnValidSubmit="SubmitAsync"
          style="height:100%; display:flex; flex-direction:column;">
    <DataAnnotationsValidator />

    <FluentDialogBody>
        <FluentStack Style="margin-bottom:10px;"
                     Orientation="Orientation.Vertical">
            <FluentCombobox TOption="Option<ExpenseReport.ExpenseType>"
                            Items="expenseTypes"
                            Label="Type"
                            Required="true"
                            OptionValue="@(e => e.Value.ToString())"
                            OptionText="@(e => e.Text)"
                            Value="@model.Type.ToString()"
                            ValueChanged="@(v => model.Type = Enum.Parse<ExpenseReport.ExpenseType>(v))"
                            Style="width:100%;" />
            <FluentValidationMessage For="@(() => model.Type)" />
        </FluentStack>
        <FluentStack Style="margin-bottom:10px;"
                     Orientation="Orientation.Vertical">
            <FluentNumberField Label="Amount"
                               @bind-Value="model.Amount"
                               Step="0.01"
                               Appearance="FluentInputAppearance.Filled"
                               Required="true"
                               Style="width:100%;">
                <FluentLabel Slot="start">&euro;</FluentLabel>
            </FluentNumberField>
            <FluentValidationMessage For="@(() => model.Amount)" />
        </FluentStack>
        <FluentStack Style="margin-bottom:10px;"
                     Orientation="Orientation.Vertical">
            <FluentTextField Label="Title"
                             @bind-Value="model.Title"
                             Appearance="FluentInputAppearance.Filled"
                             Style="width:100%"
                             Required="true" />
            <FluentValidationMessage For="@(() => model.Title)" />
        </FluentStack>
        <FluentStack Style="margin-bottom:10px;"
                     Orientation="Orientation.Vertical">
            <FluentDatePicker Label="Date"
                              @bind-Value="model.Date"
                              Appearance="FluentInputAppearance.Filled"
                              Style="width:100%"
                              Required="true" />
            <FluentValidationMessage For="@(() => model.Date)" />
        </FluentStack>
        <FluentStack Orientation="Orientation.Vertical">
            <FluentTextField Label="Location"
                             @bind-Value="model.Location"
                             Appearance="FluentInputAppearance.Filled"
                             Style="width:100%;" />
        </FluentStack>
        <FluentStack Orientation="Orientation.Vertical">
            <FluentTextField Label="Notes"
                             @bind-Value="model.Notes"
                             Appearance="FluentInputAppearance.Filled"
                             Style="width:100%;" />
        </FluentStack>
    </FluentDialogBody>
    <FluentDialogFooter>
        <FluentButton Type="ButtonType.Submit"
                      Appearance="Appearance.Accent"
                      Loading="saving">
            Save
        </FluentButton>
        <FluentButton Appearance="Appearance.Outline"
                      Type="ButtonType.Button"
                      Disabled="saving"
                      OnClick="CancelAsync">
            Cancel
        </FluentButton>
    </FluentDialogFooter>
</EditForm>

@code {
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private ExpenseReportModel model = new();

    private bool saving = false;

    private Option<ExpenseReport.ExpenseType>[] expenseTypes = [];

    protected override void OnInitialized()
    {
        expenseTypes = Enum.GetValues<ExpenseReport.ExpenseType>()
            .Select(e => new Option<ExpenseReport.ExpenseType> { Value = e, Text = e.ToString() })
            .ToArray();
    }

    private async Task SubmitAsync()
    {
        saving = true;

        try
        {
            var expenseReportId = await ExpenseReportService.CreateExpenseReportAsync(model);
            ToastService.ShowSuccess("Expense report saved correctly");

            await Dialog.CloseAsync(expenseReportId);
        }
        catch
        {
            ToastService.ShowError("An error occurred while saving the expense report");
        }
        finally
        {
            saving = false;
        }
    }

    private async Task CancelAsync()
    {
        model = new();
        await Dialog.CancelAsync();
    }
}
