@inject IExpenseReportService ExpenseReportService

<EditForm Model="Model"
          OnValidSubmit="SubmitAsync">
    <DataAnnotationsValidator />

    <MudDialog>
        <DialogContent>
            <MudGrid>
                <MudItem xs="12" md="12">
                    @if (!string.IsNullOrEmpty(resultMessage))
                    {
                        <MudAlert Class="mb-2" Severity="@(success ? Severity.Success : Severity.Error)" Dense="true">
                            @resultMessage
                        </MudAlert>
                    }
                </MudItem>
                <MudItem xs="12" md="12">
                    <MudSelect Label="Type"
                               Variant="Variant.Outlined"
                               @bind-Value="Model.Type"
                               Required="true"
                               For="@(() => Model.Type)"
                               Class="mb-2">
                        @foreach (var expenseType in Enum.GetValues<ExpenseReport.ExpenseType>())
                        {
                            <MudSelectItem Value="@expenseType">@expenseType</MudSelectItem>
                        }
                    </MudSelect>
                    <MudNumericField Label="Amount"
                                    Variant="Variant.Outlined"
                                    @bind-Value="Model.Amount"
                                    Required="true"
                                    For="@(() => Model.Amount)"
                                    Class="mb-2"
                                    Adornment="Adornment.Start"
                                    AdornmentIcon="@Icons.Material.Filled.Euro"
                                    Min="0"
                                    Step="0.1M"
                                    Format="N2" />
                    <MudTextField Label="Title"
                                @bind-Value="Model.Title"
                                Variant="Variant.Outlined"
                                For="@(() => Model.Title)"
                                Required="true"
                                Class="mb-2" />
                    <MudDatePicker Label="Date"
                                Variant="Variant.Outlined"
                                Editable="true"
                                @bind-Date="Model.Date"
                                Required="true"
                                For="@(() => Model.Date)"
                                Class="mb-2" />
                    <MudTextField Label="Location"
                                Variant="Variant.Outlined"
                                @bind-Value="Model.Location"
                                For="@(() => Model.Location)"
                                Class="mb-2" />
                    <MudTextField Label="Notes"
                                Variant="Variant.Outlined"
                                @bind-Value="Model.Notes"
                                For="@(() => Model.Notes)"
                                Class="mb-2" />
                </MudItem>
            </MudGrid>
            
        </DialogContent>
        <DialogActions>
            @if (saving)
            {
                <MudProgressCircular Indeterminate="true" Size="Size.Small" />
            }
            else 
            {
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">
                    Save
                </MudButton>
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Outlined" Color="Color.Primary" OnClick="Cancel">
                    Cancel
                </MudButton>
            }
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    public MudDialogInstance DialogInstance { get; set; } = default!;

    [Parameter]
    public ExpenseReportModel Model { get; set; } = new();

    [Parameter]
    public Guid ExpenseReportId { get; set; }

    [Parameter]
    public EventCallback OnExpenseReportSaved { get; set; }

    private bool saving = false;

    private bool success = false;

    private string? resultMessage;

    private async Task SubmitAsync()
    {
        saving = true;

        try
        {
            await ExpenseReportService.UpdateExpenseReportAsync(ExpenseReportId, Model);

            success = true;
            resultMessage = "Expense report saved successfully";

            await OnExpenseReportSaved.InvokeAsync();
        }
        catch 
        {
            success = false;
            resultMessage = "An error occurred while saving the expense report";
        }
        finally
        {
            saving = false;
        }
    }

    private void Cancel()
    {
        DialogInstance.Cancel();
    }
}
